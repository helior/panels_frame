<?php

/**
 * @todo abstract table rendering of stack frames to allow ajax replacement.
 * @todo Implement hook_panels_dashboard_blocks().
 * @todo Validate the 'category' field in builder @see panels_mini_ui.class.php
 */

 /**
  * Implements hook_ctools_plugin_directory().
  */
 function panels_frame_ctools_plugin_directory($module, $plugin) {
   if (($module == 'panels' && $plugin == 'layouts') || $module == 'ctools' && $plugin == 'export_ui') {
     return "plugins/$plugin";
   }
 }

/**
 * Implements hook_menu().
 */
function panels_frame_menu() {
  $items['admin/structure/panels/frame'] = array(
    'title' => 'Frame',
    'description' => 'General system related configuration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer panels frame'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function panels_frame_permission() {
  return array(
    'administer panels frame' => array(
      'title' => t("Use the Panels Frame UI"),
      'description' => t("Allows a user to build new layouts using the Panels Frame UI."),
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function panels_frame_element_info() {
  return array(
    'panels_frame_layout' => array(
      '#input' => TRUE,
      '#process' => array('panels_frame_element_layout_process'),
      '#theme_wrappers' => array('container', 'form_element'),
      '#allowed_layouts' => 'panels_frame',
      '#tab_options' => array(),
    ),
  );
}

/**
 * Machine-name exists callback for frame identifiers.
 */
function panels_frame_frame_identifier_exists($value, &$element, &$form_state) {}

/**
 * Element process callback for "panels_frame_layout".
 * @see panels_frame_element_info().
 */
function panels_frame_element_layout_process($element, &$form_state, $form) {
  ctools_include('common', 'panels');
  ctools_include('plugins', 'panels');
  ctools_include('cleanstring');

  $element['#attributes']['class'][] = 'panels-frame-choose-layout';
  // Panels has somewhat of an access control system in the available layouts
  // per application, in order to respect this, we declare the "module name" in
  // which we should receive layouts for. This, of course, can be customized by
  // the user.
  $layouts = panels_common_get_allowed_layouts($element['#allowed_layouts']);
  $groups = array();

  // A bit of meta-organization to group layouts together by their category.
  foreach ($layouts as $lid => $layout) {
    $key = ctools_cleanstring($layout['category']);
    $groups[$key]['category'] = $layout['category'];
    $groups[$key]['layouts'][] = $lid;
  }

  // Derive the "active tab" based on the default layout.
  if ($element['#value'] && isset($layouts[$element['#value']]) && empty($element['#tab_options']['selected'])) {
    $category_key = ctools_cleanstring($layouts[$element['#value']]['category']);
    $element['#tab_options']['selected'] = array_search($category_key, array_keys($groups));
  }

  // Prepare the tab labels for each of the layout categories.
  $element['header'] = array(
    '#theme' => 'item_list',
    '#items' => array(),
  );

  // Each layout category will render as a jQuery UI tab pane.
  foreach ($groups as $name => $group) {
    $key = drupal_html_id($name);
    $element['header']['#items'][] = '<a href="#layout-category-' . $key . '">' . $group['category'] . '</a>';
    $element['content'][$name] = array(
      '#type' => 'container',
      '#attributes' => array('id' => 'layout-category-' . $key, 'class' => array('layouts-pane')),
    );

    // Each layout in a category will be represented as a radio form element.
    // Most of the logic here was borrowed from form_process_radios().
    foreach ($group['layouts'] as $lid) {
      $parents_for_id = array_merge($element['#parents'], array($lid));
      $element['content'][$name][$lid] = array(
        '#default_value' => isset($element['#default_value']) ? $element['#default_value'] : NULL,
        '#title' => panels_print_layout_icon($lid, $layouts[$lid], $layouts[$lid]['title']),
        '#id' => drupal_html_id('edit-' . implode('-', $parents_for_id)),
        '#ajax' => isset($element['#ajax']) ? $element['#ajax'] : NULL,
        '#attributes' => $element['#attributes'],
        '#parents' => $element['#parents'],
        '#return_value' => $lid,
        '#type' => 'radio',
      );
    }
  }

  // Attach all the necessary assets. Not that #tab_options allows the user to
  // control the options that are passed to the jQuery Tab library and therefore
  // manipulate how it behaves.
  $element['#attached'] = array(
    'library' => array(
      array('system', 'ui.tabs'),
      // array('system', 'ui.button'),
    ),
    'css' => array(ctools_add_css('panels-frame.choose-layout', 'panels_frame')),
    'js' => array(
      ctools_add_js('panels-frame.choose-layout', 'panels_frame'),
      array('type' => 'setting','data' => array(
        'panelsFrame' => array(
          'chooseLayout' => array(
            'tabs' => array(
              $element['#id'] => $element['#tab_options'],
            ),
          ),
        ),
      )),
    ),
  );

  return $element;
}
